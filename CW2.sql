/* I */
DROP TABLE COUNTRIES cascade constraints PURGE;
DROP TABLE DEPARTMENTS cascade constraints PURGE;
DROP TABLE EMPLOYEES cascade constraints PURGE;
DROP TABLE JOB_HISTORY cascade constraints PURGE;
DROP TABLE JOBS cascade constraints PURGE;
DROP TABLE LOCATIONS cascade constraints PURGE;
DROP TABLE REGIONS cascade constraints PURGE;


/* II */
CREATE TABLE JOB_GRADES AS SELECT * FROM HR.JOB_GRADES;
CREATE TABLE DEPARTMENTS AS SELECT * FROM HR.departments;
CREATE TABLE JOB_HISTORY AS SELECT * FROM HR.job_history;
CREATE TABLE JOBS AS SELECT * FROM HR.jobs;
CREATE TABLE COUNTRIES AS SELECT * FROM HR.countries;
CREATE TABLE REGIONS AS SELECT * FROM HR.regions;
CREATE TABLE LOCATIONS AS SELECT * FROM HR.locations;
CREATE TABLE EMPLOYEES AS SELECT * FROM HR.employees;

ALTER TABLE DEPARTMENTS ADD PRIMARY KEY (DEPARTMENT_ID);
ALTER TABLE DEPARTMENTS ADD FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS(LOCATION_ID); /*RERUN*/
ALTER TABLE JOB_HISTORY ADD CONSTRAINT PRIMARYKEY_JOB_HISTORY PRIMARY KEY (EMPLOYEE_ID, START_DATE);
ALTER TABLE JOB_HISTORY ADD FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID); /*RERUN*/
ALTER TABLE JOB_HISTORY ADD FOREIGN KEY (JOB_ID) REFERENCES JOBS(JOB_ID); /*RERUN*/
ALTER TABLE JOB_HISTORY ADD FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID);
ALTER TABLE JOBS ADD PRIMARY KEY (JOB_ID);
ALTER TABLE JOBS ADD CHECK (MAX_SALARY-MIN_SALARY >= 2000);
ALTER TABLE COUNTRIES ADD PRIMARY KEY (COUNTRY_ID);
ALTER TABLE COUNTRIES ADD FOREIGN KEY (REGION_ID) REFERENCES REGIONS(REGION_ID); /*RERUN*/
ALTER TABLE REGIONS ADD PRIMARY KEY (REGION_ID);
ALTER TABLE LOCATIONS ADD PRIMARY KEY (LOCATION_ID);
ALTER TABLE LOCATIONS ADD FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID);
ALTER TABLE EMPLOYEES ADD PRIMARY KEY (EMPLOYEE_ID);
ALTER TABLE EMPLOYEES ADD FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID);
ALTER TABLE EMPLOYEES ADD FOREIGN KEY (JOB_ID) REFERENCES JOBS(JOB_ID);

/* LINIJKI OPATRZONE DOPISKIEM RERUN BY£Y ODPALONE JESZCZE RAZ, BO W Z£EJ KOLEJNOŒCI DODA£EM KLUCZE.
POWINIENEM PIERW DODAÆ WSZYSTKIE PRIMARY KEY A POTEM DOPIERO ROBIÆ FOREIGN KEY. A TERAZ NIE CHCE
MI SIÊ ZMIENIAÆ KOLEJNOŒCI TYCH KOMEND BO DZIA£A.*/


/* III */
SELECT CONCAT(LAST_NAME, CONCAT(',',SALARY)) FROM EMPLOYEES WHERE (DEPARTMENT_ID=20 OR DEPARTMENT_ID=50) AND SALARY BETWEEN 2000 AND 7000 ORDER BY LAST_NAME;

/* ZAK£ADAM, ¯E KOLUMNA PODANA PRZEZ U¯YTKOWNIA TO ZNACZY, ¯ER MAM SOBIE WYBRAÆ DOWOLN¥ */
SELECT HIRE_DATE, LAST_NAME, SALARY FROM EMPLOYEES WHERE MANAGER_ID IS NOT NULL AND TO_CHAR(HIRE_DATE, 'YYYY') = '2005' ORDER BY SALARY;

SELECT CONCAT (FIRST_NAME, CONCAT(' ', LAST_NAME)) AS NAZWA, SALARY, PHONE_NUMBER FROM EMPLOYEES WHERE SUBSTR(LAST_NAME, 3, 1) = 'e' AND FIRST_NAME LIKE '%ll%' ORDER BY NAZWA DESC, SALARY ASC; 

SELECT FIRST_NAME, LAST_NAME, ROUND(MONTHS_BETWEEN(CURRENT_DATE, HIRE_DATE)) AS MIESIACE, CASE
    WHEN ROUND(MONTHS_BETWEEN(CURRENT_DATE, HIRE_DATE))<150 THEN SALARY*0.1
    WHEN ROUND(MONTHS_BETWEEN(CURRENT_DATE, HIRE_DATE)) BETWEEN 150 AND 201 THEN SALARY*0.2
    WHEN ROUND(MONTHS_BETWEEN(CURRENT_DATE, HIRE_DATE)) >200 THEN SALARY*0.3
END AS WYSOKOSC_DODATKU FROM EMPLOYEES ORDER BY MIESIACE;

SELECT DEPARTMENTS.DEPARTMENT_NAME, SUM(JOBS.MIN_SALARY) AS SUMA_MIN, SUM(JOBS.MAX_SALARY) AS SUMA_MAX, AVG(JOBS.MIN_SALARY) AS SR_MIN, AVG(JOBS.MAX_SALARY) AS SR_MAX FROM DEPARTMENTS JOIN JOB_HISTORY ON JOB_HISTORY.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID JOIN JOBS ON JOB_HISTORY.JOB_ID = JOBS.JOB_ID WHERE JOBS.MIN_SALARY>5000 GROUP BY DEPARTMENTS.DEPARTMENT_NAME;

SELECT EMPLOYEES.LAST_NAME, EMPLOYEES.DEPARTMENT_ID, DEPARTMENTS.DEPARTMENT_NAME, EMPLOYEES.jOB_ID FROM EMPLOYEES JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID JOIN LOCATIONS ON DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID WHERE LOCATIONS.CITY = 'Toronto';

SELECT EMPLOYEES.FIRST_NAME, EMPLOYEES.FIRST_NAME FROM EMPLOYEES WHERE EMPLOYEES.DEPARTMENT_ID IN (SELECT DEPARTMENTS.DEPARTMENT_ID  FROM DEPARTMENTS JOIN EMPLOYEES ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID WHERE EMPLOYEES.EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM EMPLOYEES WHERE FIRST_NAME = 'Jennifer'));

SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID NOT IN (SELECT UNIQUE DEPARTMENTS.DEPARTMENT_ID FROM DEPARTMENTS JOIN EMPLOYEES ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID);

SELECT EMPLOYEES.FIRST_NAME, EMPLOYEES.LAST_NAME, DEPARTMENTS.DEPARTMENT_NAME, EMPLOYEES.SALARY, (SELECT JOB_GRADES.GRADE FROM JOB_GRADES WHERE EMPLOYEES.SALARY BETWEEN JOB_GRADES.MIN_SALARY AND JOB_GRADES.MAX_SALARY) AS GRADE FROM EMPLOYEES JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID;

SELECT EMPLOYEES.FIRST_NAME, EMPLOYEES.LAST_NAME, EMPLOYEES.SALARY FROM EMPLOYEES WHERE EMPLOYEES.SALARY > (SELECT AVG(EMPLOYEES.SALARY) FROM EMPLOYEES) ORDER BY EMPLOYEES.SALARY;

SELECT EMPLOYEES.EMPLOYEE_ID ,EMPLOYEES.FIRST_NAME, EMPLOYEES.LAST_NAME FROM EMPLOYEES WHERE EMPLOYEES.DEPARTMENT_ID IN (SELECT UNIQUE DEPARTMENTS.DEPARTMENT_ID  FROM DEPARTMENTS JOIN EMPLOYEES ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID WHERE EMPLOYEES.EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM EMPLOYEES WHERE LAST_NAME LIKE '%u%'));
